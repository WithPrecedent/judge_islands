{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Judges are not Islands","text":"Version Status Documentation Tools Compatibility Stats"},{"location":"#what-is-judge-islands","title":"What is judge islands?","text":"<p>[TODO: Brief summary of the project]</p>"},{"location":"#why-use-judge-islands","title":"Why use judge islands?","text":"<p>[TODO: Features and reasons to use the project (and, possibly, not to use it)]</p>"},{"location":"#getting-started","title":"Getting started","text":""},{"location":"#requirements","title":"Requirements","text":"<p>[TODO: List any OS or other restrictions and pre-installation dependencies]</p>"},{"location":"#installation","title":"Installation","text":"<p>To install <code>judge islands</code>, use <code>pip</code>:</p> <pre><code>pip install judge_islands\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>[TODO: Describe common use cases, with possible example(s)]</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributors are always welcome. Feel free to grab an issue to work on or make a suggested improvement. If you wish to contribute, please read the Contribution Guide and Code of Conduct.</p>"},{"location":"#similar-projects","title":"Similar Projects","text":"<p>[TODO: If they exist, it is always nice to acknowledge other similar efforts]</p>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>[TODO: Mention any people or organizations that warrant a special acknowledgment]</p>"},{"location":"#license","title":"License","text":"<p>Use of this repository is authorized under the Apache Software License 2.0.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"changelog/#010","title":"0.1.0","text":"<ul> <li>Initial Commit</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to make participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting any of the following people:</p> <ul> <li>Corey Rayburn Yung (coreyrayburnyung@gmail.com)</li> </ul> <p>All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome and greatly appreciated! Every little bit helps, and credit will always be given. Environment Setup</p>"},{"location":"contributing/#development","title":"Development","text":"<p>Follow this basic process:</p> <ol> <li>Fork and clone the repositor.</li> <li>Create a new branch: <code>git checkout -b feature-or-bugfix-name</code>.</li> <li>Edit the code.</li> <li>If you added functionality or features, update the documentation accordingly.</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"contributing/#style-guidelines","title":"Style Guidelines","text":"<p>This package follows the Google Python Style Guide with two notable exceptions:</p> <ol> <li>It always adds spaces around \"=\". This not only violates the Google guide, it violates PEP8, the foundational Python style guide from which all other resources are derived. I defy this strong, long-standign norm because I find it more readable. My brain and eyes have trouble seeing two separate objects when an equal sign is in the middle. I imagine that I am not alone in this accessibility issue. Further, as PEP8 itself notes, required spaces around equal signs are becoming increasing common with type annotations becoming part of best practices (and, as a result, signatures to classes, functions, and methods regularly include spaces around the equal signs). I realize that this will seem alien to many coders, but it is far easier on my eyes.</li> <li>I use some so-called \"power features\", primarily dunder methods, to make my interfaces easier to access and use. This is disfavored in the Google Python Style Guide because such code is often more difficult for others to read. To address that concern, I try to document and comment as to what the code is doing whenever I used any of the \"power features\" of Python.</li> </ol>"},{"location":"credits/","title":"Credits","text":"<p><p>These projects were used to build judge_islands. Thank you!</p> <p><code>python</code> | <code>pdm</code></p> </p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>attrs</code> Classes Without Boilerplate <code>&gt;=22.2.0</code> <code>23.1.0</code> MIT License <code>blinker</code> Fast, simple object-to-object and broadcast signaling <code>&gt;=1.6.2</code> <code>1.6.3</code> MIT License <code>click</code> Composable command line interface toolkit <code>&gt;=8.1.3</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>contourpy</code> Python library for calculating contours of 2D quadrilateral grids <code>&gt;=1.0.1</code> <code>1.1.0</code> BSD License <code>cycler</code> Composable style cycles <code>&gt;=0.10</code> <code>0.12.1</code> BSD License <code>flask</code> A simple framework for building complex web applications. <code>3.0.0</code> BSD License <code>fonttools</code> Tools to manipulate font files <code>&gt;=4.22.0</code> <code>4.43.1</code> MIT <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=3.6.0; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>importlib-resources</code> Read resources from Python packages <code>&gt;=3.2.0; python_version &lt; \"3.10\"</code> <code>6.1.0</code> ? <code>itsdangerous</code> Safely pass data to untrusted environments and back. <code>&gt;=2.1.2</code> <code>2.1.2</code> BSD-3-Clause <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=3.1.2</code> <code>3.1.2</code> BSD-3-Clause <code>jsonschema</code> An implementation of JSON Schema validation for Python <code>4.19.1</code> MIT <code>jsonschema-specifications</code> The JSON Schema meta-schemas and vocabularies, exposed as a Registry <code>&gt;=2023.03.6</code> <code>2023.7.1</code> MIT <code>kiwisolver</code> A fast implementation of the Cassowary constraint solver <code>&gt;=1.0.1</code> <code>1.4.5</code> BSD License <code>markdown-slides</code> <code>0.1.11</code> ? <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0</code> <code>2.1.3</code> BSD-3-Clause <code>matplotlib</code> Python plotting package <code>3.8.0</code> PSF <code>numpy</code> Fundamental package for array computing in Python <code>1.25.2</code> BSD-3-Clause <code>packaging</code> Core utilities for Python packages <code>&gt;=20.0</code> <code>23.2</code> BSD License <code>pandas</code> Powerful data structures for data analysis, time series, and statistics <code>2.1.0</code> BSD License <code>pillow</code> Python Imaging Library (Fork) <code>&gt;=6.2.0</code> <code>10.0.1</code> HPND <code>pyparsing</code> pyparsing module - Classes and methods to define and execute parsing grammars <code>&gt;=2.3.1</code> <code>3.1.1</code> MIT License <code>pyqt5</code> Python bindings for the Qt cross platform application toolkit <code>5.15.9</code> GPL v3 <code>pyqt5-qt5</code> The subset of a Qt installation needed by PyQt5. <code>&gt;=5.15.2</code> <code>5.15.2</code> LGPL v3 <code>pyqt5-sip</code> The sip module support for PyQt5 <code>&lt;13,&gt;=12.11</code> <code>12.12.2</code> SIP <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.7</code> <code>2.8.2</code> Dual License <code>python-frontmatter</code> Parse and manage posts with YAML (or other) frontmatter <code>1.0.0</code> MIT <code>pytz</code> World timezone definitions, modern and historical <code>&gt;=2020.1</code> <code>2023.3.post1</code> MIT <code>pyyaml</code> YAML parser and emitter for Python <code>6.0.1</code> MIT <code>referencing</code> JSON Referencing + Python <code>&gt;=0.28.4</code> <code>0.30.2</code> MIT <code>rpds-py</code> Python bindings to Rust's persistent data structures (rpds) <code>&gt;=0.7.1</code> <code>0.10.6</code> MIT <code>seaborn</code> Statistical data visualization <code>0.13.0</code> BSD License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>tzdata</code> Provider of IANA time zone data <code>&gt;=2022.1</code> <code>2023.3</code> Apache-2.0 <code>werkzeug</code> The comprehensive WSGI web application library. <code>&gt;=3.0.0</code> <code>3.0.0</code> BSD License <code>xkcd</code> Library to access xkcd.com <code>2.4.2</code> MIT <code>xkcd-font</code> <code>@git+https://github.com/ipython/xkcd-font</code> <code>0.0.0</code> ? <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> ?"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License <code>babel</code> Internationalization utilities <code>~=2.10</code> <code>2.13.0</code> BSD-3-Clause <code>beautifulsoup4</code> Screen-scraping library <code>4.12.2</code> MIT License <code>certifi</code> Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2023.7.22</code> MPL-2.0 <code>cfgv</code> Validate configuration and produce human readable error messages. <code>&gt;=2.0.0</code> <code>3.4.0</code> MIT <code>charset-normalizer</code> The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&lt;4,&gt;=2</code> <code>3.3.0</code> MIT <code>click</code> Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause <code>colorama</code> Cross-platform colored terminal text. <code>&gt;=0.4; platform_system == \"Windows\"</code> <code>0.4.6</code> BSD License <code>coverage</code> Code coverage measurement for Python <code>&gt;= 7.2.7</code> <code>7.3.2</code> Apache-2.0 <code>csscompressor</code> A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD <code>distlib</code> Distribution utilities <code>&lt;1,&gt;=0.3.7</code> <code>0.3.7</code> PSF-2.0 <code>exceptiongroup</code> Backport of PEP 654 (exception groups) <code>&gt;=1.0.0rc8; python_version &lt; \"3.11\"</code> <code>1.1.3</code> ? <code>execnet</code> execnet: rapid multi-Python deployment <code>&gt;=1.1</code> <code>2.0.2</code> MIT License <code>filelock</code> A platform independent file lock. <code>&lt;4,&gt;=3.12.2</code> <code>3.12.4</code> The Unlicense (Unlicense) <code>ghp-import</code> Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License <code>gitdb</code> Git Object Database <code>&lt;5,&gt;=4.0.1</code> <code>4.0.10</code> BSD License <code>gitpython</code> GitPython is a Python library used to interact with Git repositories <code>3.1.37</code> BSD <code>griffe</code> Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.35</code> <code>0.36.5</code> ISC <code>htmlmin2</code> An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD <code>identify</code> File identification library for Python <code>&gt;=1.0.0</code> <code>2.5.30</code> MIT <code>idna</code> Internationalized Domain Names in Applications (IDNA) <code>&lt;4,&gt;=2.5</code> <code>3.4</code> BSD License <code>importlib-metadata</code> Read metadata from Python packages <code>&gt;=4.3; python_version &lt; \"3.10\"</code> <code>6.8.0</code> ? <code>iniconfig</code> brain-dead simple config-ini parsing <code>2.0.0</code> MIT License <code>jinja2</code> A very fast and expressive template engine. <code>&gt;=2.11.1</code> <code>3.1.2</code> BSD-3-Clause <code>jsmin</code> JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License <code>lxml</code> Powerful and Pythonic XML processing library combining libxml2/libxslt with the ElementTree API. <code>&gt;=4.9</code> <code>4.9.3</code> BSD-3-Clause <code>markdown</code> Python implementation of John Gruber's Markdown. <code>&lt;4.0.0,&gt;=3.3.3</code> <code>3.5</code> BSD License <code>markdown-callouts</code> Markdown extension: a classier syntax for admonitions <code>&gt;= 0.3</code> <code>0.3.0</code> MIT <code>markdown-exec</code> Utilities to execute code blocks in Markdown files. <code>&gt;= 1.6.0</code> <code>1.6.0</code> ISC <code>markupsafe</code> Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>2.1.3</code> BSD-3-Clause <code>mergedeep</code> A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License <code>mkdocs</code> Project documentation with Markdown. <code>&gt;= 1.5.2</code> <code>1.5.3</code> BSD License <code>mkdocs-coverage</code> MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;= 1.0.0</code> <code>1.0.0</code> ISC <code>mkdocs-gen-files</code> MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;= 0.5.0</code> <code>0.5.0</code> MIT License <code>mkdocs-git-committers-plugin-2</code> An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of github committers and other useful GIT info such as last modified date <code>&gt;= 1.1.2</code> <code>1.2.0</code> MIT <code>mkdocs-literate-nav</code> MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;= 0.6.0</code> <code>0.6.1</code> MIT License <code>mkdocs-material</code> Documentation that simply works <code>&gt;= 9.1.2</code> <code>9.4.5</code> MIT License <code>mkdocs-material-extensions</code> Extension pack for Python Markdown and MkDocs Material. <code>~=1.2</code> <code>1.2</code> MIT License <code>mkdocs-minify-plugin</code> An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;= 0.7.1</code> <code>0.7.1</code> MIT <code>mkdocstrings</code> Automatic documentation from sources, for MkDocs. <code>[python] &gt;= 0.22.0</code> <code>0.23.0</code> ISC <code>mkdocstrings-python</code> A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.7.3</code> ISC <code>nodeenv</code> Node.js virtual environment builder <code>&gt;=0.11.1</code> <code>1.8.0</code> BSD <code>packaging</code> Core utilities for Python packages <code>&gt;=20.5</code> <code>23.2</code> BSD License <code>paginate</code> Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT <code>pathspec</code> Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.11.2</code> Mozilla Public License 2.0 (MPL 2.0) <code>platformdirs</code> A small Python package for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=2.2.0</code> <code>3.11.0</code> MIT License <code>pluggy</code> plugin and hook calling mechanisms for python <code>&lt;2.0,&gt;=0.12</code> <code>1.3.0</code> MIT <code>pre-commit</code> A framework for managing and maintaining multi-language pre-commit hooks. <code>&gt;= 3.3.3</code> <code>3.4.0</code> MIT <code>pygments</code> Pygments is a syntax highlighting package written in Python. <code>~=2.16</code> <code>2.16.1</code> BSD-2-Clause <code>pymdown-extensions</code> Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.3</code> MIT License <code>pyqt5</code> Python bindings for the Qt cross platform application toolkit <code>5.15.9</code> GPL v3 <code>pyqt5-qt5</code> The subset of a Qt installation needed by PyQt5. <code>&gt;=5.15.2</code> <code>5.15.2</code> LGPL v3 <code>pyqt5-sip</code> The sip module support for PyQt5 <code>&lt;13,&gt;=12.11</code> <code>12.12.2</code> SIP <code>pytest</code> pytest: simple powerful testing with Python <code>&gt;= 7.4.0</code> <code>7.4.2</code> MIT <code>pytest-cov</code> Pytest plugin for measuring coverage. <code>&gt;= 4.1.0</code> <code>4.1.0</code> MIT <code>pytest-randomly</code> Pytest plugin to randomly order tests and control random.seed. <code>&gt;= 3.13.0</code> <code>3.15.0</code> MIT <code>pytest-xdist</code> pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;= 3.3.1</code> <code>3.3.1</code> MIT <code>python-dateutil</code> Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.8.2</code> Dual License <code>pyyaml</code> YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT <code>pyyaml-env-tag</code> A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License <code>regex</code> Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2023.10.3</code> Apache Software License <code>requests</code> Python HTTP for Humans. <code>2.31.0</code> Apache 2.0 <code>ruff</code> An extremely fast Python linter, written in Rust. <code>&gt;= 0.0.286</code> <code>0.0.292</code> MIT <code>setuptools</code> Easily download, build, install, upgrade, and uninstall Python packages <code>68.2.2</code> MIT License <code>six</code> Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT <code>smmap</code> A pure Python implementation of a sliding window memory map manager <code>&lt;6,&gt;=3.0.1</code> <code>5.0.1</code> BSD <code>soupsieve</code> A modern CSS selector implementation for Beautiful Soup. <code>&gt;1.2</code> <code>2.5</code> MIT License <code>toml</code> Python Library for Tom's Obvious, Minimal Language <code>&gt;= 0.10.2</code> <code>0.10.2</code> MIT <code>tomli</code> A lil' TOML parser <code>; python_full_version &lt;= \"3.11.0a6\"</code> <code>2.0.1</code> ? <code>urllib3</code> HTTP library with thread-safe connection pooling, file post, and more. <code>&lt;3,&gt;=1.21.1</code> <code>2.0.6</code> MIT License <code>virtualenv</code> Virtual Python Environment builder <code>&gt;=20.10.0</code> <code>20.24.5</code> MIT License <code>watchdog</code> Filesystem events monitoring <code>&gt;=2.0</code> <code>3.0.0</code> Apache License 2.0 <code>zipp</code> Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.17.0</code> ?"},{"location":"license/","title":"License","text":"<p>Apache Software License 2.0</p> <p>Copyright \u00a9 2023, Corey Rayburn Yung</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> judge_islands<ul> <li> add_font</li> <li> charts</li> <li> shared</li> </ul> </li> </ul>"},{"location":"reference/judge_islands/","title":"Index","text":"<p>Code and documents related to Judges are not Islands</p>"},{"location":"reference/judge_islands/add_font/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> add_font","text":"<p>Adds xkcd font to <code>matplotlib</code>.</p>"},{"location":"reference/judge_islands/charts/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> charts","text":"<p>Makes visuals for the Northwestern University Law Review Symposium.</p>"},{"location":"reference/judge_islands/charts/#judge_islands.charts.create_visualizations","title":"<code>create_visualizations()</code>","text":"<p>Creates all visualizations</p> Source code in <code>src/judge_islands/charts.py</code> <pre><code>def create_visualizations() -&gt; None:\n    \"\"\"Creates all visualizations\"\"\"\n    sns.set_style('white')\n    plt.xkcd()\n    visualize_panel_effects(\n        import_path = pathlib.Path(\n            'data/external/panel_effects_criminal_appeals.csv'),\n        export_path = pathlib.Path('results/visualizations/panel_effects.png'))\n</code></pre>"},{"location":"reference/judge_islands/charts/#judge_islands.charts.visualize_panel_effects","title":"<code>visualize_panel_effects(import_path, export_path)</code>","text":"<p>Loads data, creates visualization, and exports image.</p> <p>Parameters:</p> Name Type Description Default <code>import_path</code> <code>str | Path</code> <p>path to load data from.</p> required <code>export_path</code> <code>str | Path</code> <p>path to export visualization to.</p> required Source code in <code>src/judge_islands/charts.py</code> <pre><code>def visualize_panel_effects(\n    import_path: str | pathlib.Path,\n    export_path: str | pathlib.Path) -&gt; None:\n    \"\"\"Loads data, creates visualization, and exports image.\n\n    Args:\n        import_path: path to load data from.\n        export_path: path to export visualization to.\n\n    \"\"\"\n    colors_list = ['Blue', 'Skyblue', 'Salmon', 'Red']\n    data = judge_islands.import_data(path = import_path)\n    data['Criminal Defendant Win %'] = data['Criminal Defendant Win %'] * 100\n    data_labels = data['Criminal Defendant Win %'].round(1).astype('str') + '%'\n    axes = data.plot.bar(\n        x = 'Number of Democrats on Panel', \n        y = 'Criminal Defendant Win %', \n        ylabel = 'Criminal Defendant Win %',\n        title = 'Panel Effects in Federal Criminal Defendant\\nAppeals 2008-2016 (n = 28,564)',\n        rot = 0,\n        edgecolor = colors_list,\n        color = 'White',\n        legend = False,\n        ylim = (0, 15))\n    judge_islands.add_stick_figure(\n        axes,\n        x = .3,\n        y = .21,\n        quote = 'No big deal',\n        xytext = (-10, 10))\n    for container in axes.containers:\n        axes.bar_label(container, labels = data_labels)\n        axes.yaxis.set_major_formatter(ticker.PercentFormatter())\n    judge_islands.export_visual(path = export_path)\n    plt.show()\n    return\n</code></pre>"},{"location":"reference/judge_islands/shared/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> shared","text":"<p>Makes visuals for the Northwestern University Law Review Symposium.</p>"},{"location":"reference/judge_islands/shared/#judge_islands.shared.add_stick_figure","title":"<code>add_stick_figure(axes, x=0.5, y=0.5, radius=0.03, quote=None, color='k', lw=2, xytext=(0, 20))</code>","text":"<p>Adds an xkcd-style stick figure to a chart.</p> <p>This function is adapted from Alistair Miles at: https://alimanfoo.github.io/2016/05/31/matplotlib-xkcd.html</p> <p>Parameters:</p> Name Type Description Default <code>axes</code> <code>Axes</code> <p>description</p> required <code>x</code> <code>float</code> <p>description. Defaults to .5.</p> <code>0.5</code> <code>y</code> <code>float</code> <p>description. Defaults to .5.</p> <code>0.5</code> <code>radius</code> <code>float</code> <p>description. Defaults to .03.</p> <code>0.03</code> <code>quote</code> <code>str | None</code> <p>description. Defaults to None.</p> <code>None</code> <code>color</code> <code>str</code> <p>description. Defaults to 'k'.</p> <code>'k'</code> <code>lw</code> <code>int</code> <p>description. Defaults to 2.</p> <code>2</code> <code>xytext</code> <code>tuple(int, int)</code> <p>description. Defaults to (0, 20).</p> <code>(0, 20)</code> Source code in <code>src/judge_islands/shared.py</code> <pre><code>def add_stick_figure(\n    axes: plt.axes.Axes, \n    x: float = .5, \n    y: float = .5, \n    radius: float = .03, \n    quote: str | None = None, \n    color: str = 'k', \n    lw: int = 2, \n    xytext: tuple(int, int) = (0, 20)):\n    \"\"\"Adds an xkcd-style stick figure to a chart.\n\n    This function is adapted from Alistair Miles at:\n    https://alimanfoo.github.io/2016/05/31/matplotlib-xkcd.html\n\n    Args:\n        axes: _description_\n        x: _description_. Defaults to .5.\n        y: _description_. Defaults to .5.\n        radius: _description_. Defaults to .03.\n        quote: _description_. Defaults to None.\n        color: _description_. Defaults to 'k'.\n        lw: _description_. Defaults to 2.\n        xytext: _description_. Defaults to (0, 20).\n\n    \"\"\"\n    # draw the head\n    head = plt.Circle(\n        (x, y), \n        radius=radius, \n        transform = axes.transAxes, \n        edgecolor = color, \n        lw = lw, \n        facecolor = 'none', \n        zorder = 10)\n    axes.add_patch(head)\n\n    # Common keyword arguments for remaining calls\n    kwargs = {'color': color, 'lw': lw, 'transform': axes.transAxes}\n\n    # draw the body\n    body = plt.Line2D([x, x], [y-radius, y-(radius * 4)], **kwargs)\n    axes.add_line(body)\n\n    # draw the arms\n    arm1 = plt.Line2D([x, x+(radius)], [y-(radius * 1.5), y-(radius*5)], **kwargs)\n    axes.add_line(arm1)\n    arm2 = plt.Line2D([x, x-(radius * .8)], [y-(radius * 1.5), y-(radius*5)], **kwargs)\n    axes.add_line(arm2)\n\n    # draw the legs\n    leg1 = plt.Line2D([x, x+(radius)], [y-(radius * 4), y-(radius*8)], **kwargs)\n    axes.add_line(leg1)\n    leg2 = plt.Line2D([x, x-(radius*.5)], [y-(radius * 4), y-(radius*8)], **kwargs)\n    axes.add_line(leg2)\n\n    # say something\n    if quote is not None:\n        axes.annotate(\n            quote,\n            xy = (x + radius, y + radius),\n            xytext = xytext,\n            xycoords = 'axes fraction',\n            textcoords = 'offset points',\n            arrowprops = {'arrowstyle': '-', 'lw': 1})\n</code></pre>"},{"location":"reference/judge_islands/shared/#judge_islands.shared.export_visual","title":"<code>export_visual(path)</code>","text":"<p>Exports visualization as a <code>.png</code> file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>path where file should be saved.</p> required Source code in <code>src/judge_islands/shared.py</code> <pre><code>def export_visual(path: str | pathlib.Path) -&gt; None:\n    \"\"\"Exports visualization as a `.png` file.\n\n    Args:\n        path: path where file should be saved.\n\n    \"\"\"\n    plt.savefig(path, bbox_inches = 'tight')\n    return\n</code></pre>"},{"location":"reference/judge_islands/shared/#judge_islands.shared.import_data","title":"<code>import_data(path)</code>","text":"<p>Imports data into a <code>pandas</code> dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str | Path</code> <p>path where data in a <code>.csv</code> file is located.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>dataframe with loaded data.</p> Source code in <code>src/judge_islands/shared.py</code> <pre><code>def import_data(path: str | pathlib.Path) -&gt; pd.DataFrame:\n    \"\"\"Imports data into a `pandas` dataframe.\n\n    Args:\n        path: path where data in a `.csv` file is located.\n\n    Returns:\n        dataframe with loaded data.\n\n    \"\"\"\n    return pd.read_csv(path)\n</code></pre>"}]}